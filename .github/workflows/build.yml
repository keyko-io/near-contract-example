name: Build
on:
  push:
  # branches:
  #   - main
  # tags:
  pull_request:
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_NET_GIT_FETCH_WITH_CLI: true
jobs:
  # based on
  # https://raw.githubusercontent.com/BurntSushi/ripgrep/master/.github/workflows/release.yml
  # in case a tag was set, a binary release will be made
  create-release-on-tags:
    name: Create a new release on tags
    runs-on: ubuntu-latest
    # env:
    # Set to force version number, e.g., when no tag exists.
    # RG_VERSION: TEST-0.0.0
    outputs:
      rg_version: ${{ env.RG_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RG_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RG_VERSION }}"

  # for the cargo actions, because the rust project is not on the root of the
  # repository, we use a marcopolo's fork of the actions-rs/cargo@v1 :
  # marcopolo/cargo@a527bf4d534717ff4424a84446c5d710f8833139

  build:
    # in case this is a binary release, we make sure to wait
    # for any requirement
    needs: ["create-release-on-tags"]
    runs-on: ubuntu-latest
    steps:
      # rust compiler for running tests
      - uses: actions/checkout@v2
      - name: Install latest stable (for linux-gnu)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          components: rustfmt, clippy
          # override: true
      # rust compiler for creating binaries
      - name: Install latest stable (for wasm)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          components: rustfmt, clippy
          # override: true
      # caching (cargo registry)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ubuntu-latest-stable-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      # caching (cargo index)
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ubuntu-latest-stable-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      # binary requirements (binaryen)
      # based on
      # https://github.com/rustwasm/walrus/blob/9d6c9de432d6a97478dc76ebdf18aed51584c3af/.github/workflows/main.yml#L56
      - name: Install binaryen
        run: |
          set -e
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz | tar xzf -
          echo "`pwd`/binaryen-version_105/bin" >> $GITHUB_PATH
      # triggers all build.rs steps
      - name: Trigger build.rs steps
        run: |
          find contracts \
            -maxdepth 2 \
            -name build.rs  \
            -prune \
            -exec touch -c {} \;
      # Builds the wasm binaries
      - name: Build wasm binaries
        uses: marcopolo/cargo@a527bf4d534717ff4424a84446c5d710f8833139
        with:
          command: build
          working-directory: contracts
          args: --lib --target wasm32-unknown-unknown --release
      # Builds the openapi generator binaries
      - name: Build openapi generator binaries
        uses: marcopolo/cargo@a527bf4d534717ff4424a84446c5d710f8833139
        with:
          command: build
          working-directory: contracts
          args: --bins
      # Copies the wasm binaries to contracts/res/ and strips them
      # (reducing their's sizes)
      - name: Wasm copy and strip
        run: |
          find contracts/target/wasm32-unknown-unknown/release \
            -maxdepth 1 \
            -name \*.wasm \
            -prune \
            -exec cp {} contracts/res \;
          for f in contracts/res/*.wasm
          do
            wasm-opt -Oz -o "$f" "$f"
          done
      - name: Show the wasm files and their sizes
        run: |
          ls -lah contracts/res/*.wasm | awk '{print $5 " " $9}'
      # Generate the openapi descriptions and save them to contracts/res
      - name: Openapi generation
        run: |
          for f in contracts/target/debug/*-openapi
          do
              fbase="$(basename -- $f)"
              "$f" > "contracts/res/$fbase.json"
          done
      # run the tests (which depend on the binaries from contracts/res/)
      - name: Run native tests
        uses: marcopolo/cargo@a527bf4d534717ff4424a84446c5d710f8833139
        with:
          command: test
          working-directory: contracts
          args: --target=x86_64-unknown-linux-gnu
      # based on
      # https://raw.githubusercontent.com/BurntSushi/ripgrep/master/.github/workflows/release.yml
      # in case a tag was set, a binary release will be made.
      # creates a file archive containing the wasm binaries into ./contracts-(tags).tar.gz
      - name: Build archive
        if: startsWith(github.ref, 'refs/tags')
        shell: bash
        run: |
          staging="contracts-${{ needs.create-release-on-tags.outputs.rg_version }}"
          mkdir -p "$staging/info"
          # copy all markdown files
          find contracts -name \*.md -not -path "contracts/target/*" -prune -not -path "./$staging/*" -prune -exec cp --parents {} "$staging/info/" \;
          # copy all openapi json files
          cp contracts/res/*.json "$staging/"
          # copy all wasm files
          cp contracts/res/*.wasm "$staging/"
          # save the tag name and git sha to the VERSION file
          echo ${{ needs.create-release-on-tags.outputs.rg_version }} >> "$staging/info/VERSION"
          #
          git rev-parse HEAD >> "$staging/info/VERSION"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          echo "JSON_ASSETS=$(ls -1 contracts/res/*.json)" >> $GITHUB_ENV
      - name: Upload release archive
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
            ${{ env.JSON_ASSETS }}
